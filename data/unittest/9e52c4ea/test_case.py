function = 'safe_math_evaluator'
test_cases = [{'expr_string': '2 + 2'}, {'expr_string': '10 - 5'}, {'expr_string': '3 * 4'}, {'expr_string': '8 / 2'}, {'expr_string': '10 % 3'}, {'expr_string': '2 ** 3'}, {'expr_string': '-5'}, {'expr_string': 'not True'}, {'expr_string': 'True and False'}, {'expr_string': 'True or False'}, {'expr_string': '1 < 2'}, {'expr_string': '3 > 4'}, {'expr_string': '2 == 2'}, {'expr_string': '3 != 2'}, {'expr_string': '2 <= 2'}, {'expr_string': '4 >= 3'}, {'expr_string': '(lambda x: x + 1)(5)'}, {'expr_string': '2 if True else 3'}, {'expr_string': "__import__('os')"}, {'expr_string': "open('/home/test.txt', 'w')"}, {'expr_string': "eval('2 + 2')"}, {'expr_string': "compile('2 + 2', '<string>', 'eval')"}, {'expr_string': "exec('print(2 + 2)')"}, {'expr_string': '2 + (3 * 4)'}, {'expr_string': '2 + 3 * 4'}, {'expr_string': '2 + 3 * (4 + 5)'}, {'expr_string': '2 + 3 * (4 + 5) / 3'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 & 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 | 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 ^ 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 << 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 >> 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 & 1 | 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 & 1 | 1 ^ 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 & 1 | 1 ^ 1 << 1'}, {'expr_string': '2 + 3 * (4 + 5) / 3 - 1 % 2 ** 3 & 1 | 1 ^ 1 << 1 >> 1'}]